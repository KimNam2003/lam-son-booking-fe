// pages/doctor/PendingAppointments.jsx
import { useEffect, useState } from "react";
import { Loader2, CheckCircle, XCircle, Calendar } from "lucide-react";
import { getAppointmentsByDoctor, updateAppointmentStatus } from "../../services/api/appointment.api";

const PendingAppointments = () => {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch d·ªØ li·ªáu t·ª´ backend
  useEffect(() => {
    async function fetchPending() {
      try {
        const data = await getAppointmentsByDoctor("pending");
        console.log(data);
        setAppointments(data);
      } catch (err) {
        console.error("‚ùå L·ªói khi load l·ªãch h·∫πn:", err);
      } finally {
        setLoading(false);
      }
    }

    fetchPending();
  }, []);

  // ‚úÖ X√°c nh·∫≠n l·ªãch h·∫πn
  const handleConfirm = async (id) => {
    try {
      await updateAppointmentStatus(id, "confirmed");
      setAppointments((prev) => prev.filter((a) => a.id !== id));
    } catch (err) {
      console.error("‚ùå L·ªói x√°c nh·∫≠n l·ªãch h·∫πn:", err);
    }
  };

  // ‚ùå T·ª´ ch·ªëi l·ªãch h·∫πn
  const handleReject = async (id) => {
    try {
      await updateAppointmentStatus(id, "rejected");
      setAppointments((prev) => prev.filter((a) => a.id !== id));
    } catch (err) {
      console.error("‚ùå L·ªói t·ª´ ch·ªëi l·ªãch h·∫πn:", err);
    }
  };

  if (loading)
    return (
      <div className="flex justify-center items-center h-64 text-gray-500">
        <Loader2 className="animate-spin mr-2" /> ƒêang t·∫£i d·ªØ li·ªáu...
      </div>
    );

  if (appointments.length === 0)
    return (
      <div className="p-6 text-center text-gray-600 bg-gray-50 rounded-xl">
        <Calendar className="w-10 h-10 mx-auto mb-2 text-gray-400" />
        <p>Hi·ªán kh√¥ng c√≥ l·ªãch h·∫πn n√†o ch·ªù x√°c nh·∫≠n.</p>
      </div>
    );

  return (
    <div className="p-6">
      <h1 className="text-2xl font-semibold mb-6 text-gray-800">üïë L·ªãch h·∫πn ch·ªù x√°c nh·∫≠n</h1>
      <div className="space-y-4">
        {appointments.map((appt) => (
          <div
            key={appt.id}
            className="p-5 bg-white shadow-sm rounded-xl border border-gray-200 flex justify-between items-center hover:shadow-md transition"
          >
            {/* Th√¥ng tin l·ªãch h·∫πn */}
            <div className="space-y-1">
              <p className="font-medium text-gray-800">üë§ {appt.patient?.fullName}</p>
              <p className="text-sm text-gray-600">üìû {appt.patient?.phone || "‚Äî"}</p>
              <p className="text-sm text-gray-700">
                <strong>D·ªãch v·ª•:</strong> {appt.slot.service?.name}
              </p>
              <p className="text-sm text-gray-700">
                <strong>Th·ªùi gian:</strong>{" "}
                {appt.slot
                  ? `${new Date(appt.slot.startTime).toLocaleString("vi-VN")} - ${new Date(
                      appt.slot.endTime
                    ).toLocaleTimeString("vi-VN")}`
                  : "Ch∆∞a r√µ"}
              </p>
              <p className="text-sm text-gray-700">
                <strong>Gi√°:</strong> {appt.price ? appt.price.toLocaleString("vi-VN") + "‚Ç´" : "‚Äî"}
              </p>
            </div>

            {/* N√∫t thao t√°c */}
            <div className="flex gap-3">
              <button
                onClick={() => handleConfirm(appt.id)}
                className="flex items-center gap-1 px-4 py-2 bg-green-500 text-white rounded-lg shadow hover:bg-green-600 transition"
              >
                <CheckCircle size={18} /> X√°c nh·∫≠n
              </button>
              <button
                onClick={() => handleReject(appt.id)}
                className="flex items-center gap-1 px-4 py-2 bg-red-500 text-white rounded-lg shadow hover:bg-red-600 transition"
              >
                <XCircle size={18} /> T·ª´ ch·ªëi
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default PendingAppointments;
